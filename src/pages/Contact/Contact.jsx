import React, { useState } from "react";
import { useForm } from "react-hook-form";
import generateCaptcha from "../../utils";
import { ErrorMessage } from "@hookform/error-message";
import useAuth from "../../hooks/redux/auth/useAuth";

import {
  faEnvelope,
  faFolderOpen,
  faNewspaper,
} from "@fortawesome/free-regular-svg-icons";
import {
  faLocationDot,
  faPhone,
  faRightToBracket,
  faRotateLeft,
  faUser,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { toast } from "react-toastify";
import axios from "axios";
import Card from "../../components/Card";
import { useNavigate } from "react-router-dom";
const DOMAIN = process.env.REACT_APP_STOCK;
const Contact = () => {
  const { auth } = useAuth();
  // console.log("auth", auth);
  const [captcha, setCaptcha] = useState(generateCaptcha);
  // const { currentUser } = useContext();
  const navigate = useNavigate();
  const {
    register,
    handleSubmit,
    watch,
    reset,
    getValues,
    formState: { errors },
  } = useForm({ criteriaMode: "all" });

  const onReset = (data) => {
    reset();
    setCaptcha(generateCaptcha);
    reset(data.checkCaptcha);
  };

  const resetCaptcha = (data) => {
    setCaptcha(generateCaptcha);
    reset(watch("checkCaptcha"));
  };

  const onSubmit = async (data) => {
    // console.log(data.checkCaptcha);
    // console.log(captcha);
    if (data.checkCaptcha !== captcha) {
      return false;
    }
    console.log("data", data);
    try {
      const response = await toast.promise(
        axios.post(`${DOMAIN}/contact/`, data),
        {
          pending: "ƒêang x·ª≠ l√Ω",
          success: "B·∫°n ƒë√£ g·ª≠i ph·∫£n h·ªìi th√†nh c√¥ng üëå",
          error: "Xin l·ªói !Kh√¥ng th·ªÉ g·ª≠i ph·∫£n h·ªìi ü§Ø",
        }
      );
      onReset();
      //console.log(response.data);
    } catch (error) {
      console.log(error.message);
    }
    //reset();
  };
  return (
    <div className=" grid grid-cols-5 gap-4 lg:grid-cols-5 xl:grid-cols-5 md:grid-cols-1 sm:grid-cols-1 xl:gap-4 lg:gap-4 md:gap-0 sm:gap-0">
      <div className=" col-span-3 dark:text-white text-white bg-rgba p-2">
        <p>
          ƒê·ªÉ kh√¥ng ng·ª´ng n√¢ng cao ch·∫•t l∆∞·ª£ng d·ªãch v·ª• v√† ƒë√°p ·ª©ng t·ªët h∆°n n·ªØa c√°c
          y√™u c·∫ßu c·ªßa Qu√Ω kh√°ch, ch√∫ng t√¥i mong mu·ªën nh·∫≠n ƒë∆∞·ª£c c√°c th√¥ng tin
          ph·∫£n h·ªìi. N·∫øu Qu√Ω kh√°ch c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc ho·∫∑c ƒë√≥ng g√≥p n√†o, xin vui
          l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i theo th√¥ng tin d∆∞·ªõi ƒë√¢y. Ch√∫ng t√¥i s·∫Ω ph·∫£n
          h·ªìi l·∫°i Qu√Ω kh√°ch trong th·ªùi gian s·ªõm nh·∫•t.
        </p>
        <h1 className=" text-2xl">Li√™n h·ªá</h1>
        <b>H√£y ƒë·ªÉ l·∫°i th√¥ng tin n·∫øu c√≥ th·∫Øc m·∫Øc</b>
        <p className="mb-3">
          ƒê·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ h·ªìi ƒë√°p th√¥ng tin m·ªôt c√°ch hi·ªáu qu·∫£ cho b·∫°n. vui
          l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin
        </p>
        <span className=" flex items-center mb-1">
          <FontAwesomeIcon icon={faPhone} className="mr-2" />
          <p>ƒêi·ªán tho·∫°i: 09125735261</p>
        </span>
        <span className=" flex items-center">
          <FontAwesomeIcon icon={faEnvelope} className="mr-2" />
          <p>Email: abc213@gmail.com</p>
        </span>
      </div>
      <Card extra=" col-span-2">
        <div className=" dark:text-yellow-400 ">
          <div className="border-[1px] border-[#cccccc] border-solid rounded">
            <h2 className="text-center py-2 text-white bg-yellow-500 uppercase font-bold rounded-t mb-2">
              G·ª≠i ph·∫£n h·ªìi
            </h2>
            <form
              action=""
              className="text-[#555555] p-4"
              onSubmit={handleSubmit(onSubmit)}
            >
              <div className="mb-4">
                <div
                  className={`flex items-center rounded overflow-hidden border`}
                >
                  <span className="px-[12px] py-[6px] text-[18px] bg-slate-200 border border-[#cccccc]">
                    <FontAwesomeIcon icon={faFolderOpen} />
                  </span>
                  <select
                    {...register("topic", {
                      required: "Vui l√≤ng ch·ªçn ch·ªß ƒë·ªÅ",
                    })}
                    id=""
                    className={`w-full h-[40px] text-[15px] leading-[15px] border rounded-r ${
                      errors.topic ? "border-red-500" : ""
                    }`}
                  >
                    <option value="">Ch·ªß ƒë·ªÅ b·∫°n quan t√¢m</option>
                    <option value="G·ª≠i g√≥p √Ω">G·ª≠i g√≥p √Ω</option>
                    <option value="G·ª≠i c√¢u h·ªèi">G·ª≠i c√¢u h·ªèi</option>
                  </select>
                </div>
                <ErrorMessage
                  errors={errors}
                  name="topic"
                  render={({ messages }) => {
                    //console.log("messages", messages);
                    return messages
                      ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className="ml-10 text-[14px] text-red-500"
                            key={type}
                          >
                            {message}
                          </p>
                        ))
                      : null;
                  }}
                />
              </div>
              <div className="mb-4">
                <div className="flex items-center rounded overflow-hidden">
                  <span className="px-[12px] py-[6px] text-[18px] bg-slate-200 border border-[#cccccc] ">
                    <FontAwesomeIcon icon={faNewspaper} />
                  </span>
                  <div className="w-full relative">
                    <input
                      type="text"
                      className={`block focus:outline-none w-full pl-1 h-[40px] text-[15px] leading-[15px] rounded-r border border-[#cccccc] ${
                        errors.title ? "border-red-500 border-[1px]" : ""
                      }`}
                      {...register("title", {
                        required: "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng tr∆∞·ªùng n√†y",
                        minLength: {
                          value: 10,
                          message: `Vui l√≤ng nh·∫≠p √≠t nh·∫•t 10 k√Ω t·ª±`,
                        },
                      })}
                      placeholder="Ti√™u ƒë·ªÅ"
                    />
                    <span className=" text-red-600 text-[18px] absolute top-[50%] right-[10px] translate-y-[-30%]">
                      *
                    </span>
                  </div>
                </div>
                <ErrorMessage
                  errors={errors}
                  name="title"
                  render={({ messages }) => {
                    //console.log("messages", messages);
                    return messages
                      ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className="ml-10 text-[14px] text-red-500"
                            key={type}
                          >
                            {message}
                          </p>
                        ))
                      : null;
                  }}
                />
              </div>
              <div className="mb-4">
                <div className="flex items-center rounded overflow-hidden">
                  <span className="px-[13px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] ">
                    <FontAwesomeIcon icon={faUser} />
                  </span>
                  <div className="w-full relative">
                    <input
                      type="text"
                      className={`block focus:outline-none pl-1 w-full h-[40px] text-[15px] leading-[15px] border border-[#cccccc] ${
                        auth && auth.userID && auth.userID.HoVaTen !== null
                          ? "bg-gray-200 cursor-not-allowed"
                          : ""
                      } ${
                        errors.username ? "border-red-500 border-[1px]" : ""
                      }`}
                      {...register("username", {
                        required:
                          auth && auth.userID && auth.userID.HoVaTen
                            ? false
                            : "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng tr∆∞·ªùng n√†y",
                        minLength: {
                          value: auth.userID ? 0 : 10,
                          message: auth.userID
                            ? ""
                            : "Vui l√≤ng nh·∫≠p √≠t nh·∫•t 10 k√Ω t·ª±",
                        },
                      })}
                      defaultValue={
                        // (auth && currentUser.displayName) ||

                        auth && auth?.userID?.HoVaTen
                          ? auth.userID?.HoVaTen
                          : ""
                      }
                      placeholder="H·ªç v√† t√™n"
                      // disabled={auth && auth?.userID?.HoVaTen ? true : false}
                    />
                    <span className=" text-red-600 text-[18px] absolute top-[50%] right-[10px] translate-y-[-30%]">
                      *
                    </span>
                  </div>

                  {/* <button
                      type="button"
                      onClick={() => setOpen(!open)}
                      className="px-[12px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] "
                    >
                      <BiLogIn />
                    </button> */}

                  {auth.userID ? (
                    ""
                  ) : (
                    <button
                      type="button"
                      onClick={() => navigate("/login-page")}
                      className="px-[12px] py-[5px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] "
                    >
                      <FontAwesomeIcon icon={faRightToBracket} />
                    </button>
                  )}
                </div>
                <ErrorMessage
                  errors={errors}
                  name="username"
                  render={({ messages }) => {
                    //console.log("messages", messages);
                    return messages
                      ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className="ml-10 text-[14px] text-red-500"
                            key={type}
                          >
                            {message}
                          </p>
                        ))
                      : null;
                  }}
                />
              </div>
              <div className="mb-4">
                <div className="flex items-center rounded overflow-hidden">
                  <span className="px-[12px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] ">
                    <FontAwesomeIcon icon={faEnvelope} />
                  </span>
                  <div className="w-full relative">
                    <input
                      type="text"
                      className={`block focus:outline-none pl-1 w-full h-[40px] text-[15px] leading-[15px] border border-[#cccccc] ${
                        errors.email ? "border-red-500 border-[1px]" : ""
                      }`}
                      {...register("email", {
                        required:
                          auth && auth.userID && auth.userID.Email
                            ? false
                            : "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng tr∆∞·ªùng n√†y",
                        pattern: {
                          value:
                            /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
                          message:
                            auth && auth.userID && auth.userID.Email
                              ? false
                              : `Vui l√≤ng nh·∫≠p ƒë√∫ng email VD: 'ten123@gmail.com'`,
                        },
                      })}
                      placeholder="Email"
                      defaultValue={
                        auth && auth.userID ? auth.userID.Email : ""
                      }
                      //disabled={currentUser ? true : false}
                    />
                    <span className=" text-red-600 text-[18px] absolute top-[50%] right-[10px] translate-y-[-30%]">
                      *
                    </span>
                  </div>
                </div>
                <ErrorMessage
                  errors={errors}
                  name="email"
                  render={({ messages }) => {
                    return messages
                      ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className="ml-10 text-[14px] text-red-500"
                            key={type}
                          >
                            {message}
                          </p>
                        ))
                      : null;
                  }}
                />
              </div>
              <div className="mb-4">
                <div className="flex items-center rounded overflow-hidden">
                  <span className="px-[12px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] ">
                    <FontAwesomeIcon icon={faPhone} />
                  </span>
                  <div className="w-full relative">
                    <input
                      type="text"
                      className={`block focus:outline-none w-full pl-1 h-[40px] text-[15px] leading-[15px] border border-[#cccccc] ${
                        errors.phone_number ? "border-red-500 border-[1px]" : ""
                      }`}
                      {...register("phone_number", {
                        required: "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng tr∆∞·ªùng n√†y",
                        pattern: {
                          value: /^\d{10,}$/,
                          message: "Vui l√≤ng ch·ªâ nh·∫≠p b·∫±ng s·ªë VD: '0912...'",
                        },
                        minLength: {
                          value: 10,
                          message: `Vui l√≤ng nh·∫≠p √≠t nh·∫•t 10 k√Ω t·ª±`,
                        },
                      })}
                      placeholder="S·ªë ƒëi·ªán tho·∫°i"
                      defaultValue={auth && auth.userID ? auth.userID.SƒêT : ""}
                    />
                    <span className=" text-red-600 text-[18px] absolute top-[50%] right-[10px] translate-y-[-30%]">
                      *
                    </span>
                  </div>
                </div>
                <ErrorMessage
                  errors={errors}
                  name="phone_number"
                  render={({ messages }) => {
                    return messages
                      ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className="ml-10 text-[14px] text-red-500"
                            key={type}
                          >
                            {message}
                          </p>
                        ))
                      : null;
                  }}
                />
              </div>
              <div className="mb-4">
                <div className="flex items-center rounded overflow-hidden">
                  <span className="px-[14px] py-[6px] text-[18px] bg-slate-200 border-[1px] border-[#cccccc] ">
                    <FontAwesomeIcon icon={faLocationDot} />
                  </span>
                  <input
                    type="text"
                    className={`block focus:outline-none w-full h-[40px] text-[15px] pl-1 leading-[15px] border border-[#cccccc] ${
                      errors.address ? "border-red-500 border-[1px]" : ""
                    }`}
                    {...register("address")}
                    placeholder="ƒê·ªãa ch·ªâ"
                  />
                </div>
                <ErrorMessage
                  errors={errors}
                  name="address"
                  render={({ messages }) => {
                    return messages
                      ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className="ml-10 text-[14px] text-red-500"
                            key={type}
                          >
                            {message}
                          </p>
                        ))
                      : null;
                  }}
                />
              </div>
              <div className="mb-4">
                <div className=" relative">
                  <textarea
                    name=""
                    id=""
                    className="w-full rounded text-sm border p-1 text-[15px]"
                    cols="10"
                    rows="2"
                    placeholder="N·ªôi dung"
                    {...register("content", {
                      required: "Kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng tr∆∞·ªùng n√†y",
                      minLength: {
                        value: 30,
                        message: `Vui l√≤ng nh·∫≠p √≠t nh·∫•t 30 k√Ω t·ª±`,
                      },
                    })}
                  ></textarea>
                  <span className=" text-red-600 text-[18px] absolute top-[20%] right-[10px] translate-y-[-30%]">
                    *
                  </span>
                </div>
                <ErrorMessage
                  errors={errors}
                  name="content"
                  render={({ messages }) => {
                    return messages
                      ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className="ml-10 text-[14px] text-red-500"
                            key={type}
                          >
                            {message}
                          </p>
                        ))
                      : null;
                  }}
                />
              </div>
              <div className="mb-4">
                <div className="flex items-center">
                  <div className="wrapper bg-gray-700 text-white px-3 py-2">
                    <h2 className="title">{captcha}</h2>
                  </div>
                  <button type="button" className="ml-3" onClick={resetCaptcha}>
                    <FontAwesomeIcon icon={faRotateLeft} />
                  </button>
                </div>
                <div className="inline relative">
                  <input
                    type="text"
                    className="mt-2 rounded-xl text-sm border border-[#cccccc] px-2 py-1"
                    {...register("checkCaptcha", {
                      required: "B·∫°n ch∆∞a nh·∫≠p m√£",
                    })}
                    placeholder="M√£ b·∫£o m·∫≠t"
                  />
                  <span className=" text-red-600 text-[18px] absolute top-[50%] right-[10px] translate-y-[-30%]">
                    *
                  </span>
                </div>
                <ErrorMessage
                  errors={errors}
                  name="checkCaptcha"
                  render={({ messages }) => {
                    //console.log("messages", messages);
                    return messages
                      ? Object.entries(messages).map(([type, message]) => (
                          <p
                            className="ml-10 text-[14px] text-red-500"
                            key={type}
                          >
                            {message}
                          </p>
                        ))
                      : null;
                  }}
                />
              </div>
              <div className="text-center">
                <button
                  type="button"
                  onClick={onReset}
                  className="text-white dark:text-white dark:hover:text-black border-[1px] border-solid border-[#ccc] px-3 py-2 text-[15px] rounded-xl mr-2 hover:bg-red-500"
                >
                  Nh·∫≠p l·∫°i
                </button>
                <button
                  type="submit"
                  className="bg-blue-500 px-3 py-2 text-white text-[15px] rounded-xl hover:bg-blue-700"
                >
                  G·ª≠i ƒëi
                </button>
              </div>
            </form>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default Contact;
